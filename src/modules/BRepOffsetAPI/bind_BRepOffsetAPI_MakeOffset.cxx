/*
This file is part of pyOCCT which provides Python bindings to the OpenCASCADE
geometry kernel.

Copyright (C) 2016-2018  Laughlin Research, LLC
Copyright (C) 2019 Trevor Laughlin and the pyOCCT contributors

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#include <pyOCCT_Common.hxx>
#include <BRepBuilderAPI_MakeShape.hxx>
#include <Standard.hxx>
#include <TopoDS_Face.hxx>
#include <GeomAbs_JoinType.hxx>
#include <Standard_TypeDef.hxx>
#include <TopoDS_Wire.hxx>
#include <TopTools_ListOfShape.hxx>
#include <TopoDS_Shape.hxx>
#include <BRepFill_ListOfOffsetWire.hxx>
#include <BRepOffsetAPI_MakeOffset.hxx>

void bind_BRepOffsetAPI_MakeOffset(py::module &mod){

py::class_<BRepOffsetAPI_MakeOffset, std::unique_ptr<BRepOffsetAPI_MakeOffset, Deleter<BRepOffsetAPI_MakeOffset>>, BRepBuilderAPI_MakeShape> cls_BRepOffsetAPI_MakeOffset(mod, "BRepOffsetAPI_MakeOffset", "Describes algorithms for offsetting wires from a set of wires contained in a planar face. A MakeOffset object provides a framework for: - defining the construction of an offset, - implementing the construction algorithm, and - consulting the result.");

// Constructors
cls_BRepOffsetAPI_MakeOffset.def(py::init<>());
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Face &>(), py::arg("Spine"));
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Face &, const GeomAbs_JoinType>(), py::arg("Spine"), py::arg("Join"));
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Face &, const GeomAbs_JoinType, const Standard_Boolean>(), py::arg("Spine"), py::arg("Join"), py::arg("IsOpenResult"));
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Wire &>(), py::arg("Spine"));
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Wire &, const GeomAbs_JoinType>(), py::arg("Spine"), py::arg("Join"));
cls_BRepOffsetAPI_MakeOffset.def(py::init<const TopoDS_Wire &, const GeomAbs_JoinType, const Standard_Boolean>(), py::arg("Spine"), py::arg("Join"), py::arg("IsOpenResult"));

// Fields

// Methods
// cls_BRepOffsetAPI_MakeOffset.def_static("operator new_", (void * (*)(size_t)) &BRepOffsetAPI_MakeOffset::operator new, "None", py::arg("theSize"));
// cls_BRepOffsetAPI_MakeOffset.def_static("operator delete_", (void (*)(void *)) &BRepOffsetAPI_MakeOffset::operator delete, "None", py::arg("theAddress"));
// cls_BRepOffsetAPI_MakeOffset.def_static("operator new[]_", (void * (*)(size_t)) &BRepOffsetAPI_MakeOffset::operator new[], "None", py::arg("theSize"));
// cls_BRepOffsetAPI_MakeOffset.def_static("operator delete[]_", (void (*)(void *)) &BRepOffsetAPI_MakeOffset::operator delete[], "None", py::arg("theAddress"));
// cls_BRepOffsetAPI_MakeOffset.def_static("operator new_", (void * (*)(size_t, void *)) &BRepOffsetAPI_MakeOffset::operator new, "None", py::arg(""), py::arg("theAddress"));
// cls_BRepOffsetAPI_MakeOffset.def_static("operator delete_", (void (*)(void *, void *)) &BRepOffsetAPI_MakeOffset::operator delete, "None", py::arg(""), py::arg(""));
cls_BRepOffsetAPI_MakeOffset.def("Init", [](BRepOffsetAPI_MakeOffset &self, const TopoDS_Face & a0) -> void { return self.Init(a0); });
cls_BRepOffsetAPI_MakeOffset.def("Init", [](BRepOffsetAPI_MakeOffset &self, const TopoDS_Face & a0, const GeomAbs_JoinType a1) -> void { return self.Init(a0, a1); });
cls_BRepOffsetAPI_MakeOffset.def("Init", (void (BRepOffsetAPI_MakeOffset::*)(const TopoDS_Face &, const GeomAbs_JoinType, const Standard_Boolean)) &BRepOffsetAPI_MakeOffset::Init, "Initializes the algorithm to construct parallels to the spine Spine. Join defines the type of parallel generated by the salient vertices of the spine. The default type is GeomAbs_Arc where the vertices generate sections of a circle. If join type is GeomAbs_Intersection, the edges that intersect in a salient vertex generate the edges prolonged until intersection.", py::arg("Spine"), py::arg("Join"), py::arg("IsOpenResult"));
cls_BRepOffsetAPI_MakeOffset.def("Init", [](BRepOffsetAPI_MakeOffset &self) -> void { return self.Init(); });
cls_BRepOffsetAPI_MakeOffset.def("Init", [](BRepOffsetAPI_MakeOffset &self, const GeomAbs_JoinType a0) -> void { return self.Init(a0); });
cls_BRepOffsetAPI_MakeOffset.def("Init", (void (BRepOffsetAPI_MakeOffset::*)(const GeomAbs_JoinType, const Standard_Boolean)) &BRepOffsetAPI_MakeOffset::Init, "Initialize the evaluation of Offseting.", py::arg("Join"), py::arg("IsOpenResult"));
cls_BRepOffsetAPI_MakeOffset.def("AddWire", (void (BRepOffsetAPI_MakeOffset::*)(const TopoDS_Wire &)) &BRepOffsetAPI_MakeOffset::AddWire, "Initializes the algorithm to construct parallels to the wire Spine.", py::arg("Spine"));
cls_BRepOffsetAPI_MakeOffset.def("Perform", [](BRepOffsetAPI_MakeOffset &self, const Standard_Real a0) -> void { return self.Perform(a0); });
cls_BRepOffsetAPI_MakeOffset.def("Perform", (void (BRepOffsetAPI_MakeOffset::*)(const Standard_Real, const Standard_Real)) &BRepOffsetAPI_MakeOffset::Perform, "Computes a parallel to the spine at distance Offset and at an altitude Alt from the plane of the spine in relation to the normal to the spine. Exceptions: StdFail_NotDone if the offset is not built.", py::arg("Offset"), py::arg("Alt"));
cls_BRepOffsetAPI_MakeOffset.def("Build", (void (BRepOffsetAPI_MakeOffset::*)()) &BRepOffsetAPI_MakeOffset::Build, "Builds the resulting shape (redefined from MakeShape).");
cls_BRepOffsetAPI_MakeOffset.def("Generated", (const TopTools_ListOfShape & (BRepOffsetAPI_MakeOffset::*)(const TopoDS_Shape &)) &BRepOffsetAPI_MakeOffset::Generated, "returns a list of the created shapes from the shape <S>.", py::arg("S"));

// Enums

}