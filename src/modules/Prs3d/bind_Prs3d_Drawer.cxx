/*
This file is part of pyOCCT which provides Python bindings to the OpenCASCADE
geometry kernel.

Copyright (C) 2016-2018  Laughlin Research, LLC
Copyright (C) 2019 Trevor Laughlin and the pyOCCT contributors

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#include <pyOCCT_Common.hxx>
#include <Graphic3d_PresentationAttributes.hxx>
#include <Standard_Handle.hxx>
#include <Prs3d_Drawer.hxx>
#include <Standard_Type.hxx>
#include <Aspect_TypeOfDeflection.hxx>
#include <Standard_TypeDef.hxx>
#include <Prs3d_TypeOfHLR.hxx>
#include <Prs3d_IsoAspect.hxx>
#include <Prs3d_LineAspect.hxx>
#include <Prs3d_PointAspect.hxx>
#include <Prs3d_TextAspect.hxx>
#include <Prs3d_ShadingAspect.hxx>
#include <Prs3d_PlaneAspect.hxx>
#include <Prs3d_ArrowAspect.hxx>
#include <Prs3d_VertexDrawMode.hxx>
#include <Prs3d_DatumAspect.hxx>
#include <Prs3d_DimensionAspect.hxx>
#include <TCollection_AsciiString.hxx>
#include <Graphic3d_ShaderProgram.hxx>
#include <Graphic3d_GroupAspect.hxx>
#include <Graphic3d_TypeOfShadingModel.hxx>
#include <Prs3d_DimensionUnits.hxx>

void bind_Prs3d_Drawer(py::module &mod){

py::class_<Prs3d_Drawer, opencascade::handle<Prs3d_Drawer>, Graphic3d_PresentationAttributes> cls_Prs3d_Drawer(mod, "Prs3d_Drawer", "A graphic attribute manager which governs how objects such as color, width, line thickness and deflection are displayed. A drawer includes an instance of the Aspect classes with particular default values.");

// Constructors
cls_Prs3d_Drawer.def(py::init<>());

// Fields

// Methods
cls_Prs3d_Drawer.def_static("get_type_name_", (const char * (*)()) &Prs3d_Drawer::get_type_name, "None");
cls_Prs3d_Drawer.def_static("get_type_descriptor_", (const opencascade::handle<Standard_Type> & (*)()) &Prs3d_Drawer::get_type_descriptor, "None");
cls_Prs3d_Drawer.def("DynamicType", (const opencascade::handle<Standard_Type> & (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DynamicType, "None");
cls_Prs3d_Drawer.def("SetTypeOfDeflection", (void (Prs3d_Drawer::*)(const Aspect_TypeOfDeflection)) &Prs3d_Drawer::SetTypeOfDeflection, "Sets the type of chordal deflection. This indicates whether the deflection value is absolute or relative to the size of the object.", py::arg("theTypeOfDeflection"));
cls_Prs3d_Drawer.def("TypeOfDeflection", (Aspect_TypeOfDeflection (Prs3d_Drawer::*)() const) &Prs3d_Drawer::TypeOfDeflection, "Returns the type of chordal deflection. This indicates whether the deflection value is absolute or relative to the size of the object.");
cls_Prs3d_Drawer.def("HasOwnTypeOfDeflection", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnTypeOfDeflection, "Returns true if the drawer has a type of deflection setting active.");
cls_Prs3d_Drawer.def("SetMaximalChordialDeviation", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetMaximalChordialDeviation, "Defines the maximal chordial deviation when drawing any curve. Even if the type of deviation is set to TOD_Relative, this value is used by: Prs3d_DeflectionCurve Prs3d_WFDeflectionSurface Prs3d_WFDeflectionRestrictedFace", py::arg("theChordialDeviation"));
cls_Prs3d_Drawer.def("MaximalChordialDeviation", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::MaximalChordialDeviation, "Returns the maximal chordal deviation. The default value is 0.1. Drawings of curves or patches are made with respect to an absolute maximal chordal deviation.");
cls_Prs3d_Drawer.def("HasOwnMaximalChordialDeviation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnMaximalChordialDeviation, "Returns true if the drawer has a maximal chordial deviation setting active.");
cls_Prs3d_Drawer.def("SetTypeOfHLR", (void (Prs3d_Drawer::*)(const Prs3d_TypeOfHLR)) &Prs3d_Drawer::SetTypeOfHLR, "Sets the type of HLR algorithm used by drawer's interactive objects", py::arg("theTypeOfHLR"));
cls_Prs3d_Drawer.def("TypeOfHLR", (Prs3d_TypeOfHLR (Prs3d_Drawer::*)()) &Prs3d_Drawer::TypeOfHLR, "Returns the type of HLR algorithm currently in use.");
cls_Prs3d_Drawer.def("HasOwnTypeOfHLR", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnTypeOfHLR, "Returns true if the type of HLR is not equal to Prs3d_TOH_NotSet.");
cls_Prs3d_Drawer.def("SetMaximalParameterValue", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetMaximalParameterValue, "Defines the maximum value allowed for the first and last parameters of an infinite curve.", py::arg("theValue"));
cls_Prs3d_Drawer.def("MaximalParameterValue", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::MaximalParameterValue, "Sets the maximum value allowed for the first and last parameters of an infinite curve. By default, this value is 500000.");
cls_Prs3d_Drawer.def("HasOwnMaximalParameterValue", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnMaximalParameterValue, "Returns true if the drawer has a maximum value allowed for the first and last parameters of an infinite curve setting active.");
cls_Prs3d_Drawer.def("SetIsoOnPlane", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetIsoOnPlane, "Sets IsoOnPlane on or off by setting the parameter theIsEnabled to true or false.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("IsoOnPlane", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::IsoOnPlane, "Returns True if the drawing of isos on planes is enabled.");
cls_Prs3d_Drawer.def("HasOwnIsoOnPlane", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnIsoOnPlane, "Returns true if the drawer has IsoOnPlane setting active.");
cls_Prs3d_Drawer.def("IsoOnTriangulation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::IsoOnTriangulation, "Returns True if the drawing of isos on triangulation is enabled.");
cls_Prs3d_Drawer.def("HasOwnIsoOnTriangulation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnIsoOnTriangulation, "Returns true if the drawer has IsoOnTriangulation setting active.");
cls_Prs3d_Drawer.def("SetIsoOnTriangulation", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetIsoOnTriangulation, "Enables or disables isolines on triangulation by setting the parameter theIsEnabled to true or false.", py::arg("theToEnable"));
cls_Prs3d_Drawer.def("SetDiscretisation", (void (Prs3d_Drawer::*)(const Standard_Integer)) &Prs3d_Drawer::SetDiscretisation, "Sets the discretisation parameter theValue.", py::arg("theValue"));
cls_Prs3d_Drawer.def("Discretisation", (Standard_Integer (Prs3d_Drawer::*)() const) &Prs3d_Drawer::Discretisation, "Returns the discretisation setting.");
cls_Prs3d_Drawer.def("HasOwnDiscretisation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDiscretisation, "Returns true if the drawer has discretisation setting active.");
cls_Prs3d_Drawer.def("SetDeviationCoefficient", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetDeviationCoefficient, "Sets the deviation coefficient theCoefficient. Also sets the hasOwnDeviationCoefficient flag to Standard_True and myPreviousDeviationCoefficient", py::arg("theCoefficient"));
cls_Prs3d_Drawer.def("DeviationCoefficient", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DeviationCoefficient, "Returns the deviation coefficient. Drawings of curves or patches are made with respect to a maximal chordal deviation. A Deviation coefficient is used in the shading display mode. The shape is seen decomposed into triangles. These are used to calculate reflection of light from the surface of the object. The triangles are formed from chords of the curves in the shape. The deviation coefficient gives the highest value of the angle with which a chord can deviate from a tangent to a curve. If this limit is reached, a new triangle is begun. This deviation is absolute and is set through the method: SetMaximalChordialDeviation. The default value is 0.001. In drawing shapes, however, you are allowed to ask for a relative deviation. This deviation will be: SizeOfObject * DeviationCoefficient.");
cls_Prs3d_Drawer.def("SetDeviationCoefficient", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::SetDeviationCoefficient, "Sets the hasOwnDeviationCoefficient flag to Standard_False");
cls_Prs3d_Drawer.def("HasOwnDeviationCoefficient", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDeviationCoefficient, "Returns true if there is a local setting for deviation coefficient in this framework for a specific interactive object.");
cls_Prs3d_Drawer.def("PreviousDeviationCoefficient", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::PreviousDeviationCoefficient, "Saves the previous value used for the chordal deviation coefficient.");
cls_Prs3d_Drawer.def("UpdatePreviousDeviationCoefficient", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::UpdatePreviousDeviationCoefficient, "Updates the previous value used for the chordal deviation coefficient to the current state.");
cls_Prs3d_Drawer.def("SetHLRDeviationCoefficient", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetHLRDeviationCoefficient, "Sets the deviation coefficient aCoefficient for removal of hidden lines created by different viewpoints in different presentations. The Default value is 0.02. Also sets the hasOwnHLRDeviationCoefficient flag to Standard_True and myPreviousHLRDeviationCoefficient", py::arg("theCoefficient"));
cls_Prs3d_Drawer.def("HLRDeviationCoefficient", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HLRDeviationCoefficient, "Returns the real number value of the hidden line removal deviation coefficient in this framework, if the flag hasOwnHLRDeviationCoefficient is true or there is no Link. Else the shape's HLR deviation coefficient is used. A Deviation coefficient is used in the shading display mode. The shape is seen decomposed into triangles. These are used to calculate reflection of light from the surface of the object. The triangles are formed from chords of the curves in the shape. The deviation coefficient give the highest value of the angle with which a chord can deviate from a tangent to a curve. If this limit is reached, a new triangle is begun. To find the hidden lines, hidden line display mode entails recalculation of the view at each different projector perspective. Since hidden lines entail calculations of more than usual complexity to decompose them into these triangles, a deviation coefficient allowing greater tolerance is used. This increases efficiency in calculation. The Default value is 0.02.");
cls_Prs3d_Drawer.def("SetHLRDeviationCoefficient", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::SetHLRDeviationCoefficient, "Sets the hasOwnHLRDeviationCoefficient flag to Standard_False");
cls_Prs3d_Drawer.def("HasOwnHLRDeviationCoefficient", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnHLRDeviationCoefficient, "Returns true if the there is a setting for HLR deviation coefficient in this framework for a specific interactive object.");
cls_Prs3d_Drawer.def("PreviousHLRDeviationCoefficient", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::PreviousHLRDeviationCoefficient, "Returns the previous value of the hidden line removal deviation coefficient.");
cls_Prs3d_Drawer.def("SetDeviationAngle", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetDeviationAngle, "Sets the deviation angle theAngle. Also sets the hasOwnDeviationAngle flag to Standard_True, and myPreviousDeviationAngle.", py::arg("theAngle"));
cls_Prs3d_Drawer.def("DeviationAngle", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DeviationAngle, "Returns the value for deviation angle.");
cls_Prs3d_Drawer.def("SetDeviationAngle", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::SetDeviationAngle, "Sets the hasOwnDeviationAngle flag to Standard_False");
cls_Prs3d_Drawer.def("HasOwnDeviationAngle", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDeviationAngle, "Returns true if the there is a local setting for deviation angle in this framework for a specific interactive object.");
cls_Prs3d_Drawer.def("PreviousDeviationAngle", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::PreviousDeviationAngle, "Returns the previous deviation angle");
cls_Prs3d_Drawer.def("UpdatePreviousDeviationAngle", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::UpdatePreviousDeviationAngle, "Updates the previous deviation angle to the current value");
cls_Prs3d_Drawer.def("SetHLRAngle", (void (Prs3d_Drawer::*)(const Standard_Real)) &Prs3d_Drawer::SetHLRAngle, "Sets anAngle, the angle of maximum chordal deviation for removal of hidden lines created by different viewpoints in different presentations. The default value is 20 * M_PI / 180. Also sets the hasOwnHLRDeviationAngle flag to Standard_True and myPreviousHLRDeviationAngle.", py::arg("theAngle"));
cls_Prs3d_Drawer.def("HLRAngle", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HLRAngle, "Returns the real number value of the deviation angle in hidden line removal views. The default value is 20 * M_PI / 180.");
cls_Prs3d_Drawer.def("SetHLRAngle", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::SetHLRAngle, "Sets the hasOwnHLRDeviationAngle flag to Standard_False");
cls_Prs3d_Drawer.def("HasOwnHLRDeviationAngle", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnHLRDeviationAngle, "Returns true if the there is a setting for HLR deviation angle in this framework for a specific interactive object.");
cls_Prs3d_Drawer.def("PreviousHLRDeviationAngle", (Standard_Real (Prs3d_Drawer::*)() const) &Prs3d_Drawer::PreviousHLRDeviationAngle, "Returns the previous value of the HLR deviation angle.");
cls_Prs3d_Drawer.def("SetAutoTriangulation", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetAutoTriangulation, "Sets IsAutoTriangulated on or off by setting the parameter theIsEnabled to true or false. If this flag is True automatic re-triangulation with deflection-check logic will be applied. Else this feature will be disable and triangulation is expected to be computed by application itself and no shading presentation at all if unavailable.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("IsAutoTriangulation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::IsAutoTriangulation, "Returns True if automatic triangulation is enabled.");
cls_Prs3d_Drawer.def("HasOwnIsAutoTriangulation", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnIsAutoTriangulation, "Returns true if the drawer has IsoOnPlane setting active.");
cls_Prs3d_Drawer.def("UIsoAspect", (const opencascade::handle<Prs3d_IsoAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::UIsoAspect, "Defines the attributes which are used when drawing an U isoparametric curve of a face. Defines the number of U isoparametric curves to be drawn for a single face. The LineAspect for U isoparametric lines can be edited (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) The default values are: COLOR : Quantity_NOC_GRAY75 TYPE OF LINE: Aspect_TOL_SOLID WIDTH : 0.5");
cls_Prs3d_Drawer.def("SetUIsoAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_IsoAspect> &)) &Prs3d_Drawer::SetUIsoAspect, "None", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnUIsoAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnUIsoAspect, "Returns true if the drawer has its own attribute for UIso aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("VIsoAspect", (const opencascade::handle<Prs3d_IsoAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::VIsoAspect, "Defines the attributes which are used when drawing an V isoparametric curve of a face. Defines the number of V isoparametric curves to be drawn for a single face. The LineAspect for V isoparametric lines can be edited (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) The default values are: COLOR : Quantity_NOC_GRAY82 TYPE OF LINE: Aspect_TOL_SOLID WIDTH : 0.5");
cls_Prs3d_Drawer.def("SetVIsoAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_IsoAspect> &)) &Prs3d_Drawer::SetVIsoAspect, "Sets the appearance of V isoparameters - theAspect.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnVIsoAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnVIsoAspect, "Returns true if the drawer has its own attribute for VIso aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("WireAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::WireAspect, "Returns wire aspect settings. The LineAspect for the free boundaries can be edited. The default values are: Color: Quantity_NOC_GREEN Type of line: Aspect_TOL_SOLID Width: 1.0 These attributes are used by the algorithm Prs3d_WFShape.");
cls_Prs3d_Drawer.def("SetWireAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetWireAspect, "Sets the parameter theAspect for display of wires.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnWireAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnWireAspect, "Returns true if the drawer has its own attribute for wire aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetWireDraw", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetWireDraw, "Sets WireDraw on or off by setting the parameter theIsEnabled to true or false.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("WireDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::WireDraw, "Returns True if the drawing of the wire is enabled.");
cls_Prs3d_Drawer.def("HasOwnWireDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnWireDraw, "Returns true if the drawer has its own attribute for 'draw wires' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("PointAspect", (const opencascade::handle<Prs3d_PointAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::PointAspect, "Returns the point aspect setting. The default values are Color: Quantity_NOC_YELLOW Type of marker: Aspect_TOM_PLUS Scale: 1.0 These attributes are used by the algorithms Prs3d_Point.");
cls_Prs3d_Drawer.def("SetPointAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_PointAspect> &)) &Prs3d_Drawer::SetPointAspect, "Sets the parameter theAspect for display attributes of points", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnPointAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnPointAspect, "Returns true if the drawer has its own attribute for point aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("LineAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::LineAspect, "Returns settings for line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1.0 These attributes are used by the following algorithms: Prs3d_Curve Prs3d_Line Prs3d_HLRShape");
cls_Prs3d_Drawer.def("SetLineAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetLineAspect, "Sets the parameter theAspect for display attributes of lines.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnLineAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnLineAspect, "Returns true if the drawer has its own attribute for line aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("TextAspect", (const opencascade::handle<Prs3d_TextAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::TextAspect, "Returns settings for text aspect. These settings can be edited. The default value is: - Color: Quantity_NOC_YELLOW");
cls_Prs3d_Drawer.def("SetTextAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_TextAspect> &)) &Prs3d_Drawer::SetTextAspect, "Sets the parameter theAspect for display attributes of text.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnTextAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnTextAspect, "Returns true if the drawer has its own attribute for text aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("ShadingAspect", (const opencascade::handle<Prs3d_ShadingAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::ShadingAspect, "Returns settings for shading aspects. These settings can be edited. The default values are: - Color: Quantity_NOC_YELLOW - Material: Graphic3d_NOM_BRASS Shading aspect is obtained through decomposition of 3d faces into triangles, each side of each triangle being a chord of the corresponding curved edge in the face. Reflection of light in each projector perspective is then calculated for each of the resultant triangular planes.");
cls_Prs3d_Drawer.def("SetShadingAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_ShadingAspect> &)) &Prs3d_Drawer::SetShadingAspect, "Sets the parameter theAspect for display attributes of shading.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnShadingAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnShadingAspect, "Returns true if the drawer has its own attribute for shading aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SeenLineAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::SeenLineAspect, "Returns settings for seen line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1.0");
cls_Prs3d_Drawer.def("SetSeenLineAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetSeenLineAspect, "Sets the parameter theAspect for the display of seen lines in hidden line removal mode.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnSeenLineAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnSeenLineAspect, "Returns true if the drawer has its own attribute for seen line aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("PlaneAspect", (const opencascade::handle<Prs3d_PlaneAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::PlaneAspect, "Returns settings for the appearance of planes.");
cls_Prs3d_Drawer.def("SetPlaneAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_PlaneAspect> &)) &Prs3d_Drawer::SetPlaneAspect, "Sets the parameter theAspect for the display of planes.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnPlaneAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnPlaneAspect, "Returns true if the drawer has its own attribute for plane aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("ArrowAspect", (const opencascade::handle<Prs3d_ArrowAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::ArrowAspect, "Returns the attributes for display of arrows.");
cls_Prs3d_Drawer.def("SetArrowAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_ArrowAspect> &)) &Prs3d_Drawer::SetArrowAspect, "Sets the parameter theAspect for display attributes of arrows.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnArrowAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnArrowAspect, "Returns true if the drawer has its own attribute for arrow aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetLineArrowDraw", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetLineArrowDraw, "Enables the drawing of an arrow at the end of each line. By default the arrows are not drawn.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("LineArrowDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::LineArrowDraw, "Returns True if drawing an arrow at the end of each edge is enabled and False otherwise (the default).");
cls_Prs3d_Drawer.def("HasOwnLineArrowDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnLineArrowDraw, "Returns true if the drawer has its own attribute for 'draw arrow' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("HiddenLineAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::HiddenLineAspect, "Returns settings for hidden line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_DASH Width: 1.0");
cls_Prs3d_Drawer.def("SetHiddenLineAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetHiddenLineAspect, "Sets the parameter theAspect for the display of hidden lines in hidden line removal mode.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnHiddenLineAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnHiddenLineAspect, "Returns true if the drawer has its own attribute for hidden lines aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("DrawHiddenLine", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DrawHiddenLine, "Returns Standard_True if the hidden lines are to be drawn. By default the hidden lines are not drawn.");
cls_Prs3d_Drawer.def("EnableDrawHiddenLine", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::EnableDrawHiddenLine, "Enables the DrawHiddenLine function.");
cls_Prs3d_Drawer.def("DisableDrawHiddenLine", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::DisableDrawHiddenLine, "Disables the DrawHiddenLine function.");
cls_Prs3d_Drawer.def("HasOwnDrawHiddenLine", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDrawHiddenLine, "Returns true if the drawer has its own attribute for 'draw hidden lines' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("VectorAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::VectorAspect, "Returns settings for the appearance of vectors. These settings can be edited. The default values are: Color: Quantity_NOC_SKYBLUE Type of line: Aspect_TOL_SOLID Width: 1.0");
cls_Prs3d_Drawer.def("SetVectorAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetVectorAspect, "Sets the modality theAspect for the display of vectors.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnVectorAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnVectorAspect, "Returns true if the drawer has its own attribute for vector aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetVertexDrawMode", (void (Prs3d_Drawer::*)(const Prs3d_VertexDrawMode)) &Prs3d_Drawer::SetVertexDrawMode, "Sets the mode of visualization of vertices of a TopoDS_Shape instance. By default, only stand-alone vertices (not belonging topologically to an edge) are drawn, that corresponds to Prs3d_VDM_Standalone mode. Switching to Prs3d_VDM_Standalone mode makes all shape's vertices visible. To inherit this parameter from the global drawer instance ('the link') when it is present, Prs3d_VDM_Inherited value should be used.", py::arg("theMode"));
cls_Prs3d_Drawer.def("VertexDrawMode", (Prs3d_VertexDrawMode (Prs3d_Drawer::*)()) &Prs3d_Drawer::VertexDrawMode, "Returns the current mode of visualization of vertices of a TopoDS_Shape instance.");
cls_Prs3d_Drawer.def("HasOwnVertexDrawMode", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnVertexDrawMode, "Returns true if the vertex draw mode is not equal to Prs3d_VDM_Inherited. This means that individual vertex draw mode value (i.e. not inherited from the global drawer) is used for a specific interactive object.");
cls_Prs3d_Drawer.def("DatumAspect", (const opencascade::handle<Prs3d_DatumAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::DatumAspect, "Returns settings for the appearance of datums. These settings can be edited. The default values for the three axes are: Color: Quantity_NOC_PEACHPUFF Type of line: Aspect_TOL_SOLID Width: 1.0");
cls_Prs3d_Drawer.def("SetDatumAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_DatumAspect> &)) &Prs3d_Drawer::SetDatumAspect, "Sets the modality theAspect for the display of datums.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnDatumAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDatumAspect, "Returns true if the drawer has its own attribute for datum aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SectionAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::SectionAspect, "The LineAspect for the wire can be edited. The default values are: Color: Quantity_NOC_ORANGE Type of line: Aspect_TOL_SOLID Width: 1.0 These attributes are used by the algorithm Prs3d_WFShape.");
cls_Prs3d_Drawer.def("SetSectionAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetSectionAspect, "Sets the parameter theAspect for display attributes of sections.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnSectionAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnSectionAspect, "Returns true if the drawer has its own attribute for section aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetFreeBoundaryAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetFreeBoundaryAspect, "Sets the parameter theAspect for the display of free boundaries. The method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("FreeBoundaryAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::FreeBoundaryAspect, "Returns the values for presentation of free boundaries, in other words, boundaries which are not shared. The LineAspect for the free boundaries can be edited. The default values are: Color: Quantity_NOC_GREEN Type of line: Aspect_TOL_SOLID Width: 1.0 These attributes are used by the algorithm Prs3d_WFShape");
cls_Prs3d_Drawer.def("HasOwnFreeBoundaryAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnFreeBoundaryAspect, "Returns true if the drawer has its own attribute for free boundaries aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetFreeBoundaryDraw", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetFreeBoundaryDraw, "Enables or disables drawing of free boundaries for shading presentations. The method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theIsEnabled is a boolean flag indicating whether the free boundaries should be drawn or not.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("FreeBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::FreeBoundaryDraw, "Returns True if the drawing of the free boundaries is enabled True is the default setting.");
cls_Prs3d_Drawer.def("HasOwnFreeBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnFreeBoundaryDraw, "Returns true if the drawer has its own attribute for 'draw free boundaries' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetUnFreeBoundaryAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetUnFreeBoundaryAspect, "Sets the parameter theAspect for the display of shared boundaries. The method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("UnFreeBoundaryAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::UnFreeBoundaryAspect, "Returns settings for shared boundary line aspects. The LineAspect for the unfree boundaries can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the algorithm Prs3d_WFShape");
cls_Prs3d_Drawer.def("HasOwnUnFreeBoundaryAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnUnFreeBoundaryAspect, "Returns true if the drawer has its own attribute for unfree boundaries aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetUnFreeBoundaryDraw", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetUnFreeBoundaryDraw, "Enables or disables drawing of shared boundaries for shading presentations. The method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theIsEnabled is a boolean flag indicating whether the shared boundaries should be drawn or not.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("UnFreeBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::UnFreeBoundaryDraw, "Returns True if the drawing of the shared boundaries is enabled. True is the default setting.");
cls_Prs3d_Drawer.def("HasOwnUnFreeBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnUnFreeBoundaryDraw, "Returns true if the drawer has its own attribute for 'draw shared boundaries' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetFaceBoundaryAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_LineAspect> &)) &Prs3d_Drawer::SetFaceBoundaryAspect, "Sets line aspect for face boundaries. The method sets line aspect owned by the drawer that will be used during visualization instead of the one set in link. theAspect is the line aspect that determines the look of the face boundaries.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("FaceBoundaryAspect", (const opencascade::handle<Prs3d_LineAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::FaceBoundaryAspect, "Returns line aspect of face boundaries.");
cls_Prs3d_Drawer.def("HasOwnFaceBoundaryAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnFaceBoundaryAspect, "Returns true if the drawer has its own attribute for face boundaries aspect that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetFaceBoundaryDraw", (void (Prs3d_Drawer::*)(const Standard_Boolean)) &Prs3d_Drawer::SetFaceBoundaryDraw, "Enables or disables face boundary drawing for shading presentations. The method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theIsEnabled is a boolean flag indicating whether the face boundaries should be drawn or not.", py::arg("theIsEnabled"));
cls_Prs3d_Drawer.def("FaceBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::FaceBoundaryDraw, "Checks whether the face boundary drawing is enabled or not.");
cls_Prs3d_Drawer.def("HasOwnFaceBoundaryDraw", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnFaceBoundaryDraw, "Returns true if the drawer has its own attribute for 'draw face boundaries' flag that overrides the one in the link.");
cls_Prs3d_Drawer.def("DimensionAspect", (const opencascade::handle<Prs3d_DimensionAspect> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::DimensionAspect, "Returns settings for the appearance of dimensions.");
cls_Prs3d_Drawer.def("SetDimensionAspect", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_DimensionAspect> &)) &Prs3d_Drawer::SetDimensionAspect, "Sets the settings for the appearance of dimensions. The method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theAspect"));
cls_Prs3d_Drawer.def("HasOwnDimensionAspect", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDimensionAspect, "Returns true if the drawer has its own attribute for the appearance of dimensions that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetDimLengthModelUnits", (void (Prs3d_Drawer::*)(const TCollection_AsciiString &)) &Prs3d_Drawer::SetDimLengthModelUnits, "Sets dimension length model units for computing of dimension presentation. The method sets value owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theUnits"));
cls_Prs3d_Drawer.def("SetDimAngleModelUnits", (void (Prs3d_Drawer::*)(const TCollection_AsciiString &)) &Prs3d_Drawer::SetDimAngleModelUnits, "Sets dimension angle model units for computing of dimension presentation. The method sets value owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theUnits"));
cls_Prs3d_Drawer.def("DimLengthModelUnits", (const TCollection_AsciiString & (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DimLengthModelUnits, "Returns length model units for the dimension presentation.");
cls_Prs3d_Drawer.def("DimAngleModelUnits", (const TCollection_AsciiString & (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DimAngleModelUnits, "Returns angle model units for the dimension presentation.");
cls_Prs3d_Drawer.def("HasOwnDimLengthModelUnits", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDimLengthModelUnits, "Returns true if the drawer has its own attribute for dimension length model units that overrides the one in the link.");
cls_Prs3d_Drawer.def("HasOwnDimAngleModelUnits", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDimAngleModelUnits, "Returns true if the drawer has its own attribute for dimension angle model units that overrides the one in the link.");
cls_Prs3d_Drawer.def("SetDimLengthDisplayUnits", (void (Prs3d_Drawer::*)(const TCollection_AsciiString &)) &Prs3d_Drawer::SetDimLengthDisplayUnits, "Sets length units in which value for dimension presentation is displayed. The method sets value owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theUnits"));
cls_Prs3d_Drawer.def("SetDimAngleDisplayUnits", (void (Prs3d_Drawer::*)(const TCollection_AsciiString &)) &Prs3d_Drawer::SetDimAngleDisplayUnits, "Sets angle units in which value for dimension presentation is displayed. The method sets value owned by the drawer that will be used during visualization instead of the one set in link.", py::arg("theUnits"));
cls_Prs3d_Drawer.def("DimLengthDisplayUnits", (const TCollection_AsciiString & (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DimLengthDisplayUnits, "Returns length units in which dimension presentation is displayed.");
cls_Prs3d_Drawer.def("DimAngleDisplayUnits", (const TCollection_AsciiString & (Prs3d_Drawer::*)() const) &Prs3d_Drawer::DimAngleDisplayUnits, "Returns angle units in which dimension presentation is displayed.");
cls_Prs3d_Drawer.def("HasOwnDimLengthDisplayUnits", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDimLengthDisplayUnits, "Returns true if the drawer has its own attribute for length units in which dimension presentation is displayed that overrides the one in the link.");
cls_Prs3d_Drawer.def("HasOwnDimAngleDisplayUnits", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasOwnDimAngleDisplayUnits, "Returns true if the drawer has its own attribute for angle units in which dimension presentation is displayed that overrides the one in the link.");
cls_Prs3d_Drawer.def("Link", (const opencascade::handle<Prs3d_Drawer> & (Prs3d_Drawer::*)()) &Prs3d_Drawer::Link, "Returns the drawer to which the current object references.");
cls_Prs3d_Drawer.def("HasLink", (Standard_Boolean (Prs3d_Drawer::*)() const) &Prs3d_Drawer::HasLink, "Returns true if the current object has a link on the other drawer.");
cls_Prs3d_Drawer.def("Link", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_Drawer> &)) &Prs3d_Drawer::Link, "Sets theDrawer as a link to which the current object references.", py::arg("theDrawer"));
cls_Prs3d_Drawer.def("SetLink", (void (Prs3d_Drawer::*)(const opencascade::handle<Prs3d_Drawer> &)) &Prs3d_Drawer::SetLink, "Sets theDrawer as a link to which the current object references.", py::arg("theDrawer"));
cls_Prs3d_Drawer.def("ClearLocalAttributes", (void (Prs3d_Drawer::*)()) &Prs3d_Drawer::ClearLocalAttributes, "Removes local attributes.");
cls_Prs3d_Drawer.def("SetShaderProgram", [](Prs3d_Drawer &self, const opencascade::handle<Graphic3d_ShaderProgram> & a0, const Graphic3d_GroupAspect a1) -> bool { return self.SetShaderProgram(a0, a1); });
cls_Prs3d_Drawer.def("SetShaderProgram", (bool (Prs3d_Drawer::*)(const opencascade::handle<Graphic3d_ShaderProgram> &, const Graphic3d_GroupAspect, const bool)) &Prs3d_Drawer::SetShaderProgram, "Assign shader program for specified type of primitives.", py::arg("theProgram"), py::arg("theAspect"), py::arg("theToOverrideDefaults"));
cls_Prs3d_Drawer.def("SetShadingModel", [](Prs3d_Drawer &self, Graphic3d_TypeOfShadingModel a0) -> bool { return self.SetShadingModel(a0); });
cls_Prs3d_Drawer.def("SetShadingModel", (bool (Prs3d_Drawer::*)(Graphic3d_TypeOfShadingModel, bool)) &Prs3d_Drawer::SetShadingModel, "Sets Shading Model type for the shading aspect.", py::arg("theModel"), py::arg("theToOverrideDefaults"));

// Enums

}