/*
This file is part of pyOCCT which provides Python bindings to the OpenCASCADE
geometry kernel.

Copyright (C) 2016-2018  Laughlin Research, LLC
Copyright (C) 2019 Trevor Laughlin and the pyOCCT contributors

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#include <pyOCCT_Common.hxx>
#include <Standard_Transient.hxx>
#include <Standard_TypeDef.hxx>
#include <TCollection_AsciiString.hxx>
#include <Standard_Handle.hxx>
#include <TCollection_HAsciiString.hxx>
#include <TCollection_HExtendedString.hxx>
#include <Standard_OStream.hxx>
#include <Standard_Type.hxx>

void bind_TCollection_HAsciiString(py::module &mod){

py::class_<TCollection_HAsciiString, opencascade::handle<TCollection_HAsciiString>, Standard_Transient> cls_TCollection_HAsciiString(mod, "TCollection_HAsciiString", "A variable-length sequence of ASCII characters (normal 8-bit character type). It provides editing operations with built-in memory management to make HAsciiString objects easier to use than ordinary character arrays. HAsciiString objects are handles to strings. - HAsciiString strings may be shared by several objects. - You may use an AsciiString object to get the actual string. Note: HAsciiString objects use an AsciiString string as a field.");

// Constructors
cls_TCollection_HAsciiString.def(py::init<>());
cls_TCollection_HAsciiString.def(py::init<const Standard_CString>(), py::arg("message"));
cls_TCollection_HAsciiString.def(py::init<const Standard_Character>(), py::arg("aChar"));
cls_TCollection_HAsciiString.def(py::init<const Standard_Integer, const Standard_Character>(), py::arg("length"), py::arg("filler"));
cls_TCollection_HAsciiString.def(py::init<const Standard_Integer>(), py::arg("value"));
cls_TCollection_HAsciiString.def(py::init<const Standard_Real>(), py::arg("value"));
cls_TCollection_HAsciiString.def(py::init<const TCollection_AsciiString &>(), py::arg("aString"));
cls_TCollection_HAsciiString.def(py::init<const opencascade::handle<TCollection_HAsciiString> &>(), py::arg("aString"));
cls_TCollection_HAsciiString.def(py::init<const opencascade::handle<TCollection_HExtendedString> &, const Standard_Character>(), py::arg("aString"), py::arg("replaceNonAscii"));

// Fields

// Methods
cls_TCollection_HAsciiString.def("AssignCat", (void (TCollection_HAsciiString::*)(const Standard_CString)) &TCollection_HAsciiString::AssignCat, "Appends <other> to me.", py::arg("other"));
cls_TCollection_HAsciiString.def("AssignCat", (void (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::AssignCat, "Appends <other> to me. Example: aString = aString + anotherString", py::arg("other"));
cls_TCollection_HAsciiString.def("Capitalize", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::Capitalize, "Converts the first character into its corresponding upper-case character and the other characters into lowercase. Example: before me = 'hellO ' after me = 'Hello '");
cls_TCollection_HAsciiString.def("Cat", (opencascade::handle<TCollection_HAsciiString> (TCollection_HAsciiString::*)(const Standard_CString) const) &TCollection_HAsciiString::Cat, "Creates a new string by concatenation of this ASCII string and the other ASCII string. Example: aString = aString + anotherString aString = aString + 'Dummy' aString contains 'I say ' aString = aString + 'Hello ' + 'Dolly' gives 'I say Hello Dolly' Warning: To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.", py::arg("other"));
cls_TCollection_HAsciiString.def("Cat", (opencascade::handle<TCollection_HAsciiString> (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::Cat, "Creates a new string by concatenation of this ASCII string and the other ASCII string. Example: aString = aString + anotherString", py::arg("other"));
cls_TCollection_HAsciiString.def("Center", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character)) &TCollection_HAsciiString::Center, "Modifies this ASCII string so that its length becomes equal to Width and the new characters are equal to Filler. New characters are added both at the beginning and at the end of this string. If Width is less than the length of this ASCII string, nothing happens. Example Handle(TCollection_HAsciiString) myAlphabet = new TCollection_HAsciiString ('abcdef'); myAlphabet->Center(9,' '); assert ( !strcmp( myAlphabet->ToCString(), ' abcdef ') );", py::arg("Width"), py::arg("Filler"));
cls_TCollection_HAsciiString.def("ChangeAll", [](TCollection_HAsciiString &self, const Standard_Character a0, const Standard_Character a1) -> void { return self.ChangeAll(a0, a1); });
cls_TCollection_HAsciiString.def("ChangeAll", (void (TCollection_HAsciiString::*)(const Standard_Character, const Standard_Character, const Standard_Boolean)) &TCollection_HAsciiString::ChangeAll, "Replaces all characters equal to aChar by NewChar in this ASCII string. The substitution is case sensitive if CaseSensitive is true (default value). If you do not use the default case sensitive option, it does not matter whether aChar is upper-case or not. Example Handle(TCollection_HAsciiString) myMistake = new TCollection_HAsciiString ('Hather'); myMistake->ChangeAll('H','F'); assert ( !strcmp( myMistake->ToCString(), 'Father') );", py::arg("aChar"), py::arg("NewChar"), py::arg("CaseSensitive"));
cls_TCollection_HAsciiString.def("Clear", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::Clear, "Removes all characters contained in <me>. This produces an empty HAsciiString.");
cls_TCollection_HAsciiString.def("FirstLocationInSet", (Standard_Integer (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &, const Standard_Integer, const Standard_Integer) const) &TCollection_HAsciiString::FirstLocationInSet, "Returns the index of the first character of <me> that is present in <Set>. The search begins to the index FromIndex and ends to the the index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 1", py::arg("Set"), py::arg("FromIndex"), py::arg("ToIndex"));
cls_TCollection_HAsciiString.def("FirstLocationNotInSet", (Standard_Integer (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &, const Standard_Integer, const Standard_Integer) const) &TCollection_HAsciiString::FirstLocationNotInSet, "Returns the index of the first character of <me> that is not present in the set <Set>. The search begins to the index FromIndex and ends to the the index ToIndex in <me>. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 3", py::arg("Set"), py::arg("FromIndex"), py::arg("ToIndex"));
cls_TCollection_HAsciiString.def("Insert", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character)) &TCollection_HAsciiString::Insert, "Insert a Character at position <where>. Example: aString contains 'hy not ?' aString.Insert(1,'W'); gives 'Why not ?' aString contains 'Wh' aString.Insert(3,'y'); gives 'Why' aString contains 'Way' aString.Insert(2,'h'); gives 'Why'", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("Insert", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_CString)) &TCollection_HAsciiString::Insert, "Insert a HAsciiString at position <where>.", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("Insert", (void (TCollection_HAsciiString::*)(const Standard_Integer, const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::Insert, "Insert a HAsciiString at position <where>.", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("InsertAfter", (void (TCollection_HAsciiString::*)(const Standard_Integer, const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::InsertAfter, "Inserts the other ASCII string a after a specific index in the string <me> Example: before me = 'cde' , Index = 0 , other = 'ab' after me = 'abcde' , other = 'ab'", py::arg("Index"), py::arg("other"));
cls_TCollection_HAsciiString.def("InsertBefore", (void (TCollection_HAsciiString::*)(const Standard_Integer, const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::InsertBefore, "Inserts the other ASCII string a before a specific index in the string <me> Raises an exception if Index is out of bounds Example: before me = 'cde' , Index = 1 , other = 'ab' after me = 'abcde' , other = 'ab'", py::arg("Index"), py::arg("other"));
cls_TCollection_HAsciiString.def("IsEmpty", (Standard_Boolean (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::IsEmpty, "Returns True if the string <me> contains zero character");
cls_TCollection_HAsciiString.def("IsLess", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::IsLess, "Returns TRUE if <me> is 'ASCII' less than <other>.", py::arg("other"));
cls_TCollection_HAsciiString.def("IsGreater", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::IsGreater, "Returns TRUE if <me> is 'ASCII' greater than <other>.", py::arg("other"));
cls_TCollection_HAsciiString.def("IntegerValue", (Standard_Integer (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::IntegerValue, "Converts a HAsciiString containing a numeric expression to an Integer. Example: '215' returns 215.");
cls_TCollection_HAsciiString.def("IsIntegerValue", (Standard_Boolean (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::IsIntegerValue, "Returns True if the string contains an integer value.");
cls_TCollection_HAsciiString.def("IsRealValue", (Standard_Boolean (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::IsRealValue, "Returns True if the string contains a real value.");
cls_TCollection_HAsciiString.def("IsAscii", (Standard_Boolean (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::IsAscii, "Returns True if the string contains only ASCII characters between ' ' and '~'. This means no control character and no extended ASCII code.");
cls_TCollection_HAsciiString.def("IsDifferent", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::IsDifferent, "Returns True if the string S not contains same characters than the string <me>.", py::arg("S"));
cls_TCollection_HAsciiString.def("IsSameString", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::IsSameString, "Returns True if the string S contains same characters than the string <me>.", py::arg("S"));
cls_TCollection_HAsciiString.def("IsSameString", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &, const Standard_Boolean) const) &TCollection_HAsciiString::IsSameString, "Returns True if the string S contains same characters than the string <me>.", py::arg("S"), py::arg("CaseSensitive"));
cls_TCollection_HAsciiString.def("LeftAdjust", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::LeftAdjust, "Removes all space characters in the begining of the string");
cls_TCollection_HAsciiString.def("LeftJustify", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character)) &TCollection_HAsciiString::LeftJustify, "Left justify. Length becomes equal to Width and the new characters are equal to Filler if Width < Length nothing happens Raises an exception if Width is less than zero Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = 'abcdef '", py::arg("Width"), py::arg("Filler"));
cls_TCollection_HAsciiString.def("Length", (Standard_Integer (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::Length, "Returns number of characters in <me>. This is the same functionality as 'strlen' in C.");
cls_TCollection_HAsciiString.def("Location", (Standard_Integer (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &, const Standard_Integer, const Standard_Integer) const) &TCollection_HAsciiString::Location, "returns an index in the string <me> of the first occurence of the string S in the string <me> from the starting index FromIndex to the ending index ToIndex returns zero if failure Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAaAa', S = 'Aa', FromIndex = 1, ToIndex = 7 after me = 'aabAaAa' returns 4", py::arg("other"), py::arg("FromIndex"), py::arg("ToIndex"));
cls_TCollection_HAsciiString.def("Location", (Standard_Integer (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character, const Standard_Integer, const Standard_Integer) const) &TCollection_HAsciiString::Location, "Returns the index of the nth occurence of the character C in the string <me> from the starting index FromIndex to the ending index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range Example: before me = 'aabAa', N = 3, C = 'a', FromIndex = 1, ToIndex = 5 after me = 'aabAa' returns 5", py::arg("N"), py::arg("C"), py::arg("FromIndex"), py::arg("ToIndex"));
cls_TCollection_HAsciiString.def("LowerCase", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::LowerCase, "Converts <me> to its lower-case equivalent.");
cls_TCollection_HAsciiString.def("Prepend", (void (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::Prepend, "Inserts the other string at the begining of the string <me> Example: before me = 'cde' , S = 'ab' after me = 'abcde' , S = 'ab'", py::arg("other"));
cls_TCollection_HAsciiString.def("Print", (void (TCollection_HAsciiString::*)(Standard_OStream &) const) &TCollection_HAsciiString::Print, "Prints this string on the stream <astream>.", py::arg("astream"));
cls_TCollection_HAsciiString.def("RealValue", (Standard_Real (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::RealValue, "Converts a string containing a numeric expression to a Real. Example: '215' returns 215.0. '3.14159267' returns 3.14159267.");
cls_TCollection_HAsciiString.def("RemoveAll", (void (TCollection_HAsciiString::*)(const Standard_Character, const Standard_Boolean)) &TCollection_HAsciiString::RemoveAll, "Remove all the occurences of the character C in the string Example: before me = 'HellLLo', C = 'L' , CaseSensitive = True after me = 'Hello'", py::arg("C"), py::arg("CaseSensitive"));
cls_TCollection_HAsciiString.def("RemoveAll", (void (TCollection_HAsciiString::*)(const Standard_Character)) &TCollection_HAsciiString::RemoveAll, "Removes every <what> characters from <me>", py::arg("what"));
cls_TCollection_HAsciiString.def("Remove", [](TCollection_HAsciiString &self, const Standard_Integer a0) -> void { return self.Remove(a0); });
cls_TCollection_HAsciiString.def("Remove", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Integer)) &TCollection_HAsciiString::Remove, "Erases <ahowmany> characters from position <where>, <where> included. Example: aString contains 'Hello' aString.Erase(2,2) erases 2 characters from position 1 This gives 'Hlo'.", py::arg("where"), py::arg("ahowmany"));
cls_TCollection_HAsciiString.def("RightAdjust", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::RightAdjust, "Removes all space characters at the end of the string.");
cls_TCollection_HAsciiString.def("RightJustify", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character)) &TCollection_HAsciiString::RightJustify, "Right justify. Length becomes equal to Width and the new characters are equal to Filler if Width < Length nothing happens Raises an exception if Width is less than zero Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = ' abcdef'", py::arg("Width"), py::arg("Filler"));
cls_TCollection_HAsciiString.def("Search", (Standard_Integer (TCollection_HAsciiString::*)(const Standard_CString) const) &TCollection_HAsciiString::Search, "Searches a CString in <me> from the beginning and returns position of first item <what> matching. It returns -1 if not found. Example: aString contains 'Sample single test' aString.Search('le') returns 5", py::arg("what"));
cls_TCollection_HAsciiString.def("Search", (Standard_Integer (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::Search, "Searches a String in <me> from the beginning and returns position of first item <what> matching. it returns -1 if not found.", py::arg("what"));
cls_TCollection_HAsciiString.def("SearchFromEnd", (Standard_Integer (TCollection_HAsciiString::*)(const Standard_CString) const) &TCollection_HAsciiString::SearchFromEnd, "Searches a CString in a String from the end and returns position of first item <what> matching. It returns -1 if not found. Example: aString contains 'Sample single test' aString.SearchFromEnd('le') returns 12", py::arg("what"));
cls_TCollection_HAsciiString.def("SearchFromEnd", (Standard_Integer (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::SearchFromEnd, "Searches a HAsciiString in another HAsciiString from the end and returns position of first item <what> matching. It returns -1 if not found.", py::arg("what"));
cls_TCollection_HAsciiString.def("SetValue", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Character)) &TCollection_HAsciiString::SetValue, "Replaces one character in the string at position <where>. If <where> is less than zero or greater than the length of <me> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <me> = 'Garbage'", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("SetValue", (void (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_CString)) &TCollection_HAsciiString::SetValue, "Replaces a part of <me> in the string at position <where>. If <where> is less than zero or greater than the length of <me> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <me> = 'Garbage'", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("SetValue", (void (TCollection_HAsciiString::*)(const Standard_Integer, const opencascade::handle<TCollection_HAsciiString> &)) &TCollection_HAsciiString::SetValue, "Replaces a part of <me> by another string.", py::arg("where"), py::arg("what"));
cls_TCollection_HAsciiString.def("Split", (opencascade::handle<TCollection_HAsciiString> (TCollection_HAsciiString::*)(const Standard_Integer)) &TCollection_HAsciiString::Split, "Splits a HAsciiString into two sub-strings. Example: aString contains 'abcdefg' aString.Split(3) gives <me> = 'abc' and returns 'defg'", py::arg("where"));
cls_TCollection_HAsciiString.def("SubString", (opencascade::handle<TCollection_HAsciiString> (TCollection_HAsciiString::*)(const Standard_Integer, const Standard_Integer) const) &TCollection_HAsciiString::SubString, "Creation of a sub-string of the string <me>. The sub-string starts to the index Fromindex and ends to the index ToIndex. Raises an exception if ToIndex or FromIndex is out of bounds Example: before me = 'abcdefg', ToIndex=3, FromIndex=6 after me = 'abcdefg' returns 'cdef'", py::arg("FromIndex"), py::arg("ToIndex"));
cls_TCollection_HAsciiString.def("ToCString", (Standard_CString (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::ToCString, "Returns pointer to string (char *) This is useful for some casual manipulations Because this 'char *' is 'const', you can't modify its contents.");
cls_TCollection_HAsciiString.def("Token", [](TCollection_HAsciiString &self) -> opencascade::handle<TCollection_HAsciiString> { return self.Token(); });
cls_TCollection_HAsciiString.def("Token", [](TCollection_HAsciiString &self, const Standard_CString a0) -> opencascade::handle<TCollection_HAsciiString> { return self.Token(a0); });
cls_TCollection_HAsciiString.def("Token", (opencascade::handle<TCollection_HAsciiString> (TCollection_HAsciiString::*)(const Standard_CString, const Standard_Integer) const) &TCollection_HAsciiString::Token, "Extracts <whichone> token from <me>. By default, the <separators> is set to space and tabulation. By default, the token extracted is the first one (whichone = 1). <separators> contains all separators you need. If no token indexed by <whichone> is found, it returns an empty String. Example: aString contains 'This is a message' aString.Token() returns 'This' aString.Token(' ',4) returns 'message' aString.Token(' ',2) returns 'is' aString.Token(' ',9) returns '' Other separators than space character and tabulation are allowed aString contains '1234; test:message , value' aString.Token('; :,',4) returns 'value' aString.Token('; :,',2) returns 'test'", py::arg("separators"), py::arg("whichone"));
cls_TCollection_HAsciiString.def("Trunc", (void (TCollection_HAsciiString::*)(const Standard_Integer)) &TCollection_HAsciiString::Trunc, "Truncates <me> to <ahowmany> characters. Example: me = 'Hello Dolly' -> Trunc(3) -> me = 'Hel'", py::arg("ahowmany"));
cls_TCollection_HAsciiString.def("UpperCase", (void (TCollection_HAsciiString::*)()) &TCollection_HAsciiString::UpperCase, "Converts <me> to its upper-case equivalent.");
cls_TCollection_HAsciiString.def("UsefullLength", (Standard_Integer (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::UsefullLength, "Length of the string ignoring all spaces (' ') and the control character at the end.");
cls_TCollection_HAsciiString.def("Value", (Standard_Character (TCollection_HAsciiString::*)(const Standard_Integer) const) &TCollection_HAsciiString::Value, "Returns character at position <where> in <me>. If <where> is less than zero or greater than the lenght of <me>, an exception is raised. Example: aString contains 'Hello' aString.Value(2) returns 'e'", py::arg("where"));
cls_TCollection_HAsciiString.def("String", (const TCollection_AsciiString & (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::String, "Returns the field myString.");
cls_TCollection_HAsciiString.def("IsSameState", (Standard_Boolean (TCollection_HAsciiString::*)(const opencascade::handle<TCollection_HAsciiString> &) const) &TCollection_HAsciiString::IsSameState, "None", py::arg("other"));
cls_TCollection_HAsciiString.def_static("get_type_name_", (const char * (*)()) &TCollection_HAsciiString::get_type_name, "None");
cls_TCollection_HAsciiString.def_static("get_type_descriptor_", (const opencascade::handle<Standard_Type> & (*)()) &TCollection_HAsciiString::get_type_descriptor, "None");
cls_TCollection_HAsciiString.def("DynamicType", (const opencascade::handle<Standard_Type> & (TCollection_HAsciiString::*)() const) &TCollection_HAsciiString::DynamicType, "None");

// Enums

}